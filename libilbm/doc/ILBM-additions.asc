Appendix E. IFF Hints

Hints on ILBM files from Jerry Morrison, Oct 1988.  How to avoid some
pitfalls when reading ILBM files:

  * Don't ignore the BitMapHeader.masking field.  A bitmap with a mask
    (such as a partially-transparent DPaint brush or a DPaint picture with
    a stencil) will read as garbage if you don't de-interleave the mask.

  * Don't assume all images are compressed.  Narrow images aren't usually
    run-compressed since that would actually make them longer.

  * Don't assume a particular image size.  You may encounter overscan
    pictures and PAL pictures.

There's a better way to read a BODY than the example IFF code.  The
GetBODY routine should call a GetScanline routine once per scan line,
which calls a GetRow routine for each bitplane in the file.  This in turn
calls a GetUnpackedBytes routine, which calls a GetBytes routine as needed
and unpacks the result.  (If the picture is uncompressed, GetRow calls
GetBytes directly.) Since theunpacker knows how many packed bytes to read,
this avoids juggling buffers for a memory-to-memory UnPackBytes routine.

Caution: If you make many AmigaDOS calls to read or write a few bytes at a
time, performance will be mud! AmigaDOS has a high overhead per call, even
with RAM disk.  So use buffered read/write routines.

Different hardware display devices have different color resolutions:

    Device        R:G:B bits    maxColor
    -------       ----------    --------
    Mac SE            1              1
    IBM EGA       2:2:2              3
    Atari ST      3:3:3              7
    Amiga         4:4:4             15
    CD-I          5:5:5             31
    IBM VGA       6:6:6             63
    Mac II        8:8:8            255

An ILBM CMAP defines 8 bits of Red, Green and Blue (i.e., 8:8:8 bits of
R:G:B). When displaying on hardware which has less color resolution, just
take the high order bits.  For example, to convert ILBM's 8-bit Red to the
Amiga's 4-bit Red, right shift the data by 4 bits  (R4 := R8 >> 4).

To convert hardware colors to ILBM colors, the ILBM specification says
just set the high bits (R8 := R4 << 4).  But you can transmit higher
contrast to foreign display devices by scaling the data [0..maxColor] to
the full range [0..255].  In other words, R8 := (Rn x 255) รท maxColor.
(Example #1:  EGA color 1:2:3 scales to 85:170:255.  Example #2:  Amiga
15:7:0 scales to 255:119:0).  This makes a big difference where maxColor
is less than 15.  In the extreme case, Mac SE white (1) should be
converted to ILBM white (255), not to ILBM gray (128).

CGA and EGA subtleties

IBM EGA colors in 350 scan line mode are 2:2:2 bits of R:G:B, stored in
memory as xxR'G'B'RBG.  That's 3 low-order bits followed by 3 high-order
bits.

IBM CGA colors are 4 bits stored in a byte as xxxxIRGB.  (EGA colors in
200 scan line modes are the same as CGA colors, but stored in memory as
xxxIxRGB.) That's 3 high-order bits (one for each of R, G, and B) plus one
low-order " Intensity" bit for all 3 components R, G, and B.  Exception:
IBM monitors show IRGB = 0110 as brown, which is really the EGA color
R:G:B = 2:1:0, not dark yellow 2:2:0.

24-bit ILBMs

When storing deep images as ILBMs (such as images with 8 bits each of R,G,
and B), the bits for each pixel represent an absolute RGB value for that
pixel rather than an index into a limited color map.  The order for saving
the bits is critical since a deep ILBM would not contain the usual CMAP of
RGB values (such a CMAP would be too large and redundant).

To interpret these "deep" ILBMs, it is necessary to have a standard order
in which the bits of the R, G, and B values will be stored.  A number of
different orderings have already been used in deep ILBMs, so it was
necessary to us chose one of these orderings as a standard.

The following bit ordering has been chosen as the default bit ordering for
deep ILBMs.

Default standard deep ILBM bit ordering:
saved first -----------------------------------------------> saved last
R0 R1 R2 R3 R4 R5 R6 R7 G0 G1 G2 G3 G4 G5 G6 G7 B0 B1 B2 B3 B4 B5 B6 B7

One other existing deep bit ordering that you may encounter is the 21-bit
NewTek format.

NewTek deep ILBM bit ordering:
saved first ------------------------------------------------> saved last
R7 G7 B7 R6 G6 B6 R5 G5 B5 R4 G4 B4 R3 G3 B3 R2 G2 B2 R1 G1 B1 R0 G0 B0

Note that you may encounter CLUT chunks in deep ILBM's.  See the
Third Party Specs appendix for more information on CLUT chunks.

8-bit Grayscale

The original standard doesn't prescribe the form of an 8-bit grayscale image, but
we can infer one from the convention for 24-bit color. Grayscale images also lack
a CMAP, and their bitplanes are saved in least to most significant bit order.

   Grayscale ILBM bit ordering:
   saved first -----> last
   I0 I1 I2 I3 I4 I5 I6 I7

Some programs fail to recognize 8-bit ILBMs with no color table. For maximum
portability, ILBM writers can include a CMAP containing 256 entries, with the RGB
levels ranging from (0, 0, 0) for the first entry to (255, 255, 255) for the
last. Strictly speaking, this creates an indexed color image in which all of the
colors happen to be shades of gray, but this distinction may not make any
difference in practice.

32-bit RGB plus Alpha

A more recent (and much less widely supported) extension of the standard is the
32-bit RGBA. This adds an 8-bit grayscale alpha image to the red, green and blue
stored in 24-bit ILBMs. The alpha bitplanes are stored after the R, G and B
planes for each scanline.

   32-bit RGBA ILBM bit ordering:
   saved first -----------------------------------> last
   R0 ... R7 G0 ... G7 B0 ... B7 A0 A1 A2 A3 A4 A5 A6 A7

